use std::fs::{self, OpenOptions};
use std::io::Write;
use std::path::PathBuf;
use chrono::Utc;
use log::LevelFilter;
use env_logger::{Builder, Target};

/// ÂàùÂßãÂåñÊó•ÂøóÁ≥ªÁªüÔºåÂ∞ÜÊó•ÂøóÂÜôÂÖ•Â∫îÁî®Êï∞ÊçÆÁõÆÂΩï
pub fn init_logging(app_handle: &tauri::AppHandle) -> Result<(), Box<dyn std::error::Error>> {
    // Ëé∑ÂèñÂ∫îÁî®Êï∞ÊçÆÁõÆÂΩï - Windows‰ΩøÁî®ÂÆâË£ÖÁõÆÂΩïÔºåÂÖ∂‰ªñÂπ≥Âè∞‰ΩøÁî®AppData
    let app_data_dir = get_app_data_dir_for_logging(app_handle)?;

    // ÂàõÂª∫Êó•ÂøóÁõÆÂΩï
    let log_dir = app_data_dir.join("logs");
    fs::create_dir_all(&log_dir)
        .map_err(|e| format!("Failed to create log directory: {}", e))?;

    // ÂàõÂª∫Êó•ÂøóÊñá‰ª∂ÔºàÊåâÊó•ÊúüÂëΩÂêçÔºâ
    let log_file_name = format!("steno_{}.log", Utc::now().format("%Y%m%d"));
    let log_file_path = log_dir.join(log_file_name);

    // ÊâìÂºÄÊó•ÂøóÊñá‰ª∂ÔºàËøΩÂä†Ê®°ÂºèÔºâ
    let log_file = OpenOptions::new()
        .create(true)
        .append(true)
        .open(&log_file_path)
        .map_err(|e| format!("Failed to open log file: {}", e))?;

    // ÈÖçÁΩÆenv_loggerÂÜôÂÖ•Êñá‰ª∂
    Builder::from_default_env()
        .target(Target::Pipe(Box::new(log_file)))
        .filter_level(LevelFilter::Info)
        .format(|buf, record| {
            writeln!(
                buf,
                "[{}] [{}] [{}:{}] - {}",
                Utc::now().format("%Y-%m-%d %H:%M:%S%.3f"),
                record.level(),
                record.file().unwrap_or("unknown"),
                record.line().unwrap_or(0),
                record.args()
            )
        })
        .init();

    // ÂêåÊó∂ËæìÂá∫Âà∞stderr‰æõË∞ÉËØï‰ΩøÁî®
    eprintln!("üìù Êó•ÂøóÁ≥ªÁªüÂ∑≤ÂàùÂßãÂåñÔºåÊó•ÂøóÊñá‰ª∂: {}", log_file_path.display());
    log::info!("=== Steno Â∫îÁî®ÂêØÂä® ===");
    log::info!("Êó•ÂøóÊñá‰ª∂‰ΩçÁΩÆ: {}", log_file_path.display());
    
    // Ê∏ÖÁêÜÊóßÊó•ÂøóÊñá‰ª∂Ôºà‰øùÁïôÊúÄËøë7Â§©Ôºâ
    cleanup_old_logs(&log_dir)?;

    Ok(())
}

/// Ëé∑ÂèñÂ∫îÁî®Êï∞ÊçÆÁõÆÂΩï - ÊîØÊåÅWindowsÂÆâË£ÖÁõÆÂΩïÊ®°Âºè
fn get_app_data_dir_for_logging(app_handle: &tauri::AppHandle) -> Result<PathBuf, Box<dyn std::error::Error>> {
    #[cfg(target_os = "windows")]
    {
        // Windows: ‰ΩøÁî®ÂÆâË£ÖÁõÆÂΩï
        get_windows_install_dir().map_err(|e| e.into())
    }
    
    #[cfg(not(target_os = "windows"))]
    {
        // macOS/Linux: ‰ΩøÁî®AppDataÁõÆÂΩï
        use tauri::Manager;
        app_handle
            .path()
            .app_data_dir()
            .map_err(|e| format!("Failed to get app data dir: {}", e).into())
    }
}

/// Windows‰∏ìÁî®ÔºöËé∑ÂèñÂ∫îÁî®Á®ãÂ∫èÂÆâË£ÖÁõÆÂΩï
#[cfg(target_os = "windows")]
fn get_windows_install_dir() -> Result<PathBuf, Box<dyn std::error::Error>> {
    // ÊñπÊ≥ï1: Â∞ùËØï‰ªéÂΩìÂâçÂèØÊâßË°åÊñá‰ª∂Ë∑ØÂæÑËé∑Âèñ
    if let Ok(exe_path) = std::env::current_exe() {
        if let Some(exe_dir) = exe_path.parent() {
            return Ok(exe_dir.to_path_buf());
        }
    }
    
    // ÊñπÊ≥ï2: ‰ΩøÁî®Â∑•‰ΩúÁõÆÂΩï‰Ωú‰∏∫Â§áÈÄâ
    if let Ok(current_dir) = std::env::current_dir() {
        return Ok(current_dir);
    }
    
    // ÊñπÊ≥ï3: ÊúÄÂêéÂ§áÈÄâ - ‰ΩøÁî®Áõ∏ÂØπË∑ØÂæÑ
    Ok(PathBuf::from("."))
}

/// Ê∏ÖÁêÜË∂ÖËøá7Â§©ÁöÑÊóßÊó•ÂøóÊñá‰ª∂
fn cleanup_old_logs(log_dir: &PathBuf) -> Result<(), Box<dyn std::error::Error>> {
    let now = std::time::SystemTime::now();
    let seven_days = std::time::Duration::from_secs(7 * 24 * 60 * 60);

    if let Ok(entries) = fs::read_dir(log_dir) {
        for entry in entries.flatten() {
            if let Ok(metadata) = entry.metadata() {
                if metadata.is_file() {
                    if let Some(file_name) = entry.file_name().to_str() {
                        if file_name.starts_with("steno_") && file_name.ends_with(".log") {
                            if let Ok(modified) = metadata.modified() {
                                if let Ok(age) = now.duration_since(modified) {
                                    if age > seven_days {
                                        if let Err(e) = fs::remove_file(entry.path()) {
                                            log::warn!("Êó†Ê≥ïÂà†Èô§ÊóßÊó•ÂøóÊñá‰ª∂ {}: {}", entry.path().display(), e);
                                        } else {
                                            log::info!("Â∑≤Âà†Èô§ÊóßÊó•ÂøóÊñá‰ª∂: {}", entry.path().display());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Ok(())
}

/// ËÆ∞ÂΩïÂ∫îÁî®ÂÖ≥Èó≠‰ø°ÊÅØ
pub fn log_app_shutdown() {
    log::info!("=== Steno Â∫îÁî®Ê≠£Â∏∏ÂÖ≥Èó≠ ===");
}

/// ËÆ∞ÂΩïÂ∫îÁî®Â¥©Ê∫É‰ø°ÊÅØ
pub fn log_app_crash(error: &str) {
    log::error!("=== Steno Â∫îÁî®ÂºÇÂ∏∏ÈÄÄÂá∫ ===");
    log::error!("ÈîôËØØ‰ø°ÊÅØ: {}", error);
    
    // ‰πüËæìÂá∫Âà∞stderrÁ°Æ‰øùËÉΩÁúãÂà∞
    eprintln!("üí• Â∫îÁî®Â¥©Ê∫É: {}", error);
}

/// ‰∏∫ÂÖ≥ÈîÆÊìç‰ΩúËÆ∞ÂΩïÊó•ÂøóÁöÑÂÆè
#[macro_export]
macro_rules! log_operation {
    ($op:expr, $result:expr) => {
        match $result {
            Ok(val) => {
                log::info!("‚úÖ {} - ÊàêÂäü", $op);
                Ok(val)
            },
            Err(e) => {
                log::error!("‚ùå {} - Â§±Ë¥•: {}", $op, e);
                Err(e)
            }
        }
    };
}