name: Build Windows Application

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CI: true
  NODE_ENV: production
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      timeout-minutes: 10
      run: |
        echo "Installing npm dependencies..."
        npm ci --no-audit --no-fund
        echo "Dependencies installed successfully"

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Cache whisper.cpp build (Windows)
      uses: actions/cache@v4
      with:
        path: src-tauri/lib/whisper.cpp/build
        key: windows-x64-whisper-${{ hashFiles('src-tauri/lib/whisper.cpp/**/*.cpp', 'src-tauri/lib/whisper.cpp/**/*.h', 'src-tauri/lib/whisper.cpp/CMakeLists.txt') }}
        restore-keys: |
          windows-x64-whisper-

    - name: Setup MSVC (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64


    - name: Verify build tools (Windows)
      continue-on-error: true
      run: |
        echo "Verifying build tools..."
        cmake --version
        cl.exe 2>&1 | findstr "Version"
        echo "Build tools verification completed"
      shell: cmd

    - name: Build whisper.cpp library (Windows)
      timeout-minutes: 20
      run: |
        cd src-tauri/lib/whisper.cpp
        if not exist build mkdir build
        cd build
        echo "Configuring CMake..."
        cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
        if %ERRORLEVEL% neq 0 (
          echo "CMake configuration failed"
          exit /b 1
        )
        echo "Building whisper.cpp..."
        cmake --build . --config Release --parallel
        if %ERRORLEVEL% neq 0 (
          echo "whisper.cpp build failed"
          exit /b 1
        )
        echo "whisper.cpp build completed successfully"
      shell: cmd

    - name: Verify whisper.cpp build artifacts (Windows)
      continue-on-error: true
      run: |
        cd src-tauri/lib/whisper.cpp/build
        echo "=== Build directory structure ==="
        dir /s *.lib
        echo "=== Checking specific library locations ==="
        if exist "src\Release\whisper.lib" (echo "✓ Found whisper.lib") else (echo "✗ Missing whisper.lib")
        if exist "ggml\src\Release\ggml-base.lib" (echo "✓ Found ggml-base.lib") else (echo "✗ Missing ggml-base.lib")
        if exist "ggml\src\ggml-blas\Release\ggml-blas.lib" (echo "✓ Found ggml-blas.lib (BLAS enabled)") else (echo "⚠ ggml-blas.lib not found (BLAS disabled - normal on Windows)")
        if exist "ggml\src\Release\ggml.lib" (echo "✓ Found ggml.lib") else (echo "✗ Missing ggml.lib")
      shell: cmd

    - name: Build Tauri app for Windows
      timeout-minutes: 30
      run: |
        echo "Starting Tauri build for Windows..."
        npm run build:windows
        echo "Tauri build completed successfully"
      env:
        RUST_BACKTRACE: 1
        TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

    - name: Verify build outputs (Windows)
      continue-on-error: true
      run: |
        echo "=== Checking build outputs ==="
        if exist "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi" (dir "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\*.msi") else (echo "⚠️ MSI files not found")
        if exist "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis" (dir "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis\*.exe") else (echo "⚠️ NSIS files not found")
        echo "=== Executable size and info ==="
        if exist "src-tauri\target\x86_64-pc-windows-msvc\release\steno.exe" (dir "src-tauri\target\x86_64-pc-windows-msvc\release\steno.exe") else (echo "⚠️ Main executable not found")
      shell: cmd

    - name: Create portable package (Windows)
      continue-on-error: true
      timeout-minutes: 5
      run: |
        echo "=== Creating portable package ==="
        if exist "src-tauri\target\x86_64-pc-windows-msvc\release\steno.exe" (
          mkdir portable-steno
          copy "src-tauri\target\x86_64-pc-windows-msvc\release\steno.exe" "portable-steno\"
          echo. > "portable-steno\portable.txt"
          echo Steno Portable Version > "portable-steno\README.txt"
          echo This is a portable version of Steno. All data will be stored in this directory. >> "portable-steno\README.txt"
          echo Create an empty "portable.txt" file to enable portable mode. >> "portable-steno\README.txt"
          powershell Compress-Archive -Path "portable-steno" -DestinationPath "steno-portable-windows-x64.zip"
          echo "✓ Portable package created"
        ) else (
          echo "❌ Cannot create portable package: executable not found"
        )
      shell: cmd

    - name: Generate checksums (Windows)
      continue-on-error: true
      timeout-minutes: 5
      run: |
        echo "=== Generating checksums ==="
        powershell -Command "
        $files = Get-ChildItem -Path 'src-tauri\target\x86_64-pc-windows-msvc\release\bundle' -Recurse -Include '*.msi', '*.exe'
        if (Test-Path 'steno-portable-windows-x64.zip') { $files += Get-ChildItem 'steno-portable-windows-x64.zip' }
        foreach ($file in $files) {
          $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
          $relativePath = $file.FullName.Replace((Get-Location), '.')
          Write-Output ($hash.Hash + '  ' + $relativePath) | Add-Content 'checksums.txt'
        }
        if (Test-Path 'checksums.txt') { Get-Content 'checksums.txt' }
        "
      shell: powershell

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-app
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
          steno-portable-windows-x64.zip
          checksums.txt
        retention-days: 30

    - name: Upload Windows installer logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-logs
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/build/**/*.log
          src-tauri/target/**/*.log
        retention-days: 7

  build-macos:
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin,x86_64-apple-darwin

    - name: Cache whisper.cpp build (macOS)
      uses: actions/cache@v4
      with:
        path: src-tauri/lib/whisper.cpp/build
        key: macos-whisper-${{ hashFiles('src-tauri/lib/whisper.cpp/**/*.cpp', 'src-tauri/lib/whisper.cpp/**/*.h', 'src-tauri/lib/whisper.cpp/CMakeLists.txt') }}
        restore-keys: |
          macos-whisper-

    - name: Verify build tools (macOS)
      run: |
        cmake --version
        xcode-select -p

    - name: Build whisper.cpp library (macOS)
      run: |
        cd src-tauri/lib/whisper.cpp
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
        cmake --build . --config Release --parallel

    - name: Verify whisper.cpp build artifacts (macOS)
      run: |
        cd src-tauri/lib/whisper.cpp/build
        echo "=== Build directory structure ==="
        find . -name "*.a" -type f
        echo "=== Checking specific library locations ==="
        if [ -f "src/libwhisper.a" ]; then echo "✓ Found libwhisper.a"; else echo "✗ Missing libwhisper.a"; fi
        if [ -f "ggml/src/libggml.a" ]; then echo "✓ Found libggml.a"; else echo "✗ Missing libggml.a"; fi
        echo "=== All files in src directory ==="
        ls -la src/ || echo "src/ directory not found"

    - name: Build Tauri app for macOS
      run: npm run tauri:build

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg
        retention-days: 30