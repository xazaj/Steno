name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CI: true
  NODE_ENV: production
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        timeout-minutes: 10
        run: |
          echo "Installing npm dependencies..."
          npm ci --no-audit --no-fund
          echo "Dependencies installed successfully"

      - name: Frontend lint
        run: npm run lint --if-present

      - name: Frontend type check
        run: npm run type-check --if-present

      - name: Frontend test
        run: npm test --if-present

      - name: Rust format check
        run: cd src-tauri && cargo fmt --all -- --check

      - name: Rust clippy
        run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings

      - name: Rust test
        run: cd src-tauri && cargo test

  build-check:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        timeout-minutes: 10
        run: |
          echo "Installing npm dependencies..."
          npm ci --no-audit --no-fund
          echo "Dependencies installed successfully"

      - name: Build frontend
        timeout-minutes: 15
        run: |
          echo "Building frontend..."
          npm run build
          echo "Frontend build completed successfully"

      - name: Build Tauri app (debug)
        timeout-minutes: 30
        run: |
          echo "Building Tauri app in debug mode..."
          npm run tauri build -- --debug
          echo "Tauri debug build completed successfully"