name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CI: true
  NODE_ENV: production
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 90
    
    steps:
      # === STEP 1: Repository Checkout ===
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # === STEP 2: Submodule Initialization (Simplified) ===
      - name: Initialize submodules
        timeout-minutes: 10
        run: |
          echo "Initializing submodules..."
          git submodule update --init --recursive --depth 1
          
          # Verify critical files exist
          if [ ! -f "src-tauri/lib/whisper.cpp/CMakeLists.txt" ]; then
            echo "❌ whisper.cpp submodule missing critical files"
            echo "Attempting full clone..."
            git submodule update --init --recursive --force
          fi
          
          echo "✅ Submodules initialized successfully"
        shell: bash

      # === STEP 3: Tool Setup ===
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === STEP 4: Caching ===
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Cache whisper.cpp build
        uses: actions/cache@v4
        with:
          path: src-tauri/lib/whisper.cpp/build
          key: ${{ runner.os }}-${{ matrix.arch }}-whisper-${{ hashFiles('src-tauri/lib/whisper.cpp/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-whisper-

      # === STEP 5: Tool Verification ===
      - name: Verify build tools
        run: |
          echo "=== Tool Verification ==="
          node --version
          npm --version
          rustc --version
          cargo --version
          cmake --version || echo "CMake not found"
        shell: bash

      # === STEP 6: whisper.cpp Build (Simplified) ===
      - name: Build whisper.cpp library
        timeout-minutes: 15
        run: |
          echo "Building whisper.cpp..."
          cd src-tauri/lib/whisper.cpp
          
          # Create build directory
          mkdir -p build
          cd build
          
          # Configure and build based on platform
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "Configuring for Windows..."
            cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
            cmake --build . --config Release --parallel 4
          else
            echo "Configuring for Unix..."
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
            cmake --build . --config Release --parallel 4
          fi
          
          echo "✅ whisper.cpp build completed"
        shell: bash

      - name: Verify whisper.cpp artifacts
        run: |
          echo "=== Verifying whisper.cpp build artifacts ==="
          cd src-tauri/lib/whisper.cpp/build
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            find . -name "*.lib" -type f | head -10
          else
            find . -name "*.a" -type f | head -10
          fi
          
          echo "✅ Build artifacts verified"
        shell: bash

      # === STEP 7: Frontend Build ===
      - name: Install frontend dependencies
        timeout-minutes: 8
        run: |
          echo "Installing npm dependencies..."
          npm ci --no-audit --no-fund
          echo "✅ Dependencies installed"

      - name: Build frontend
        timeout-minutes: 10
        run: |
          echo "Building frontend..."
          npm run build
          echo "✅ Frontend build completed"

      - name: Verify frontend build
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "✅ Frontend build output verified"
            ls -la dist/ | head -5
          else
            echo "❌ Frontend build failed - dist directory empty or missing"
            exit 1
          fi
        shell: bash

      # === STEP 8: Tauri Build ===
      - name: Verify Tauri CLI
        run: |
          echo "Verifying Tauri CLI..."
          npx tauri --version
          echo "✅ Tauri CLI verified"
        shell: bash

      - name: Build Tauri application
        timeout-minutes: 45
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_BACKTRACE: 1
        with:
          args: ${{ matrix.args }}

      # === STEP 9: Verify Build Output ===
      - name: Verify build outputs
        run: |
          echo "=== Verifying build outputs ==="
          target_dir="src-tauri/target/${{ matrix.target }}/release/bundle"
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if [ -d "$target_dir/msi" ] && [ "$(ls -A $target_dir/msi 2>/dev/null)" ]; then
              echo "✅ Windows MSI found:"
              ls -la "$target_dir/msi/"
            else
              echo "❌ Windows MSI not found"
            fi
            
            if [ -d "$target_dir/nsis" ] && [ "$(ls -A $target_dir/nsis 2>/dev/null)" ]; then
              echo "✅ Windows NSIS installer found:"
              ls -la "$target_dir/nsis/"
            else
              echo "⚠️  Windows NSIS installer not found (may be disabled)"
            fi
          else
            if [ -d "$target_dir/dmg" ] && [ "$(ls -A $target_dir/dmg 2>/dev/null)" ]; then
              echo "✅ macOS DMG found:"
              ls -la "$target_dir/dmg/"
            else
              echo "❌ macOS DMG not found"
            fi
          fi
        shell: bash

      # === STEP 10: Upload Artifacts ===
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: steno-${{ matrix.arch }}-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 30

      # === STEP 11: Debug Information (On Failure) ===
      - name: Debug build failure
        if: failure()
        run: |
          echo "=== Build Failure Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Available files:"
          ls -la
          echo "Target directory:"
          ls -la src-tauri/target/ 2>/dev/null || echo "Target directory not found"
          echo "Node modules:"
          ls -la node_modules/.bin/ 2>/dev/null | grep -i tauri || echo "Tauri not found in node_modules"
          echo "Environment:"
          env | grep -E "(RUST|NODE|NPM|PATH)" | head -10
          echo "=== End Debug Info ==="
        shell: bash

  # === RELEASE JOB ===
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== Downloaded Artifacts ==="
          find artifacts -type f -name "*.dmg" -o -name "*.msi" -o -name "*.exe" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}