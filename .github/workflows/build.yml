name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CI: true
  NODE_ENV: production
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    timeout-minutes: 90
    
    steps:
      # === STEP 1: Repository Checkout ===
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # === STEP 2: Submodule Initialization (Robust) ===
      - name: Initialize submodules
        timeout-minutes: 10
        run: |
          echo "Initializing submodules..."
          
          # Try fast clone first
          if git submodule update --init --recursive --depth 1; then
            echo "✅ Fast submodule initialization successful"
          else
            echo "⚠️ Fast initialization failed, trying full clone..."
            git submodule update --init --recursive --force
          fi
          
          # Critical validation with detailed reporting
          echo "=== Validating whisper.cpp submodule ==="
          
          WHISPER_ROOT="src-tauri/lib/whisper.cpp"
          
          # Check if whisper.cpp directory exists
          if [ ! -d "$WHISPER_ROOT" ]; then
            echo "❌ whisper.cpp directory not found: $WHISPER_ROOT"
            exit 1
          fi
          
          # Show directory structure for debugging
          echo "whisper.cpp directory structure:"
          ls -la "$WHISPER_ROOT" | head -10
          
          # Critical files validation
          CRITICAL_FILES=(
            "$WHISPER_ROOT/CMakeLists.txt"
            "$WHISPER_ROOT/include/whisper.h"
          )
          
          CRITICAL_DIRS=(
            "$WHISPER_ROOT/src"
            "$WHISPER_ROOT/include"
          )
          
          # Validate critical files
          echo "Checking critical files..."
          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing: $file"
              echo "Available files in $(dirname "$file"):"
              ls -la "$(dirname "$file")" 2>/dev/null || echo "Directory doesn't exist"
              exit 1
            fi
          done
          
          # Validate critical directories
          echo "Checking critical directories..."
          for dir in "${CRITICAL_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              FILE_COUNT=$(find "$dir" -type f | wc -l)
              echo "✅ Found: $dir ($FILE_COUNT files)"
            else
              echo "❌ Missing: $dir"
              exit 1
            fi
          done
          
          echo "✅ Submodules initialized and verified"
        shell: bash

      # === STEP 3: Tool Setup ===
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # === STEP 4: Enhanced Tool Verification ===
      - name: Verify all required tools
        run: |
          echo "=== Comprehensive Tool Verification ==="
          
          # Core tools (must exist)
          REQUIRED_TOOLS=("node" "npm" "rustc" "cargo")
          for tool in "${REQUIRED_TOOLS[@]}"; do
            if command -v "$tool" >/dev/null 2>&1; then
              echo "✅ $tool: $(command -v "$tool") - $("$tool" --version | head -1)"
            else
              echo "❌ $tool: NOT FOUND"
              exit 1
            fi
          done
          
          # Platform-specific tools
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            if command -v cl >/dev/null 2>&1; then
              echo "✅ MSVC compiler: $(cl 2>&1 | head -1 | tr -d '\r\n')"
            else
              echo "❌ MSVC compiler not found"
              exit 1
            fi
          fi
          
          # CMake verification
          if command -v cmake >/dev/null 2>&1; then
            echo "✅ CMake: $(cmake --version | head -1)"
          else
            echo "❌ CMake not found"
            exit 1
          fi
          
          echo "✅ All required tools verified"
        shell: bash

      # === STEP 5: Caching (Enhanced) ===
      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Cache whisper.cpp build
        uses: actions/cache@v4
        with:
          path: src-tauri/lib/whisper.cpp/build
          key: ${{ runner.os }}-${{ matrix.arch }}-whisper-${{ hashFiles('src-tauri/lib/whisper.cpp/**/*.{cpp,h,hpp,c}', 'src-tauri/lib/whisper.cpp/CMakeLists.txt', 'src-tauri/lib/whisper.cpp/**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-whisper-

      - name: Cache NPM dependencies (with version-aware key)
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ hashFiles('package.json') }}-
            ${{ runner.os }}-npm-

      # === STEP 6: whisper.cpp Build (Robust) ===
      - name: Build whisper.cpp library
        timeout-minutes: 20
        run: |
          echo "Building whisper.cpp..."
          
          # Navigate to whisper.cpp directory
          WHISPER_DIR="src-tauri/lib/whisper.cpp"
          if [ ! -d "$WHISPER_DIR" ]; then
            echo "❌ whisper.cpp directory not found"
            exit 1
          fi
          
          cd "$WHISPER_DIR"
          
          # Create and enter build directory
          BUILD_DIR="build"
          mkdir -p "$BUILD_DIR"
          cd "$BUILD_DIR"
          
          # Platform-specific build configuration
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "=== Windows Build Configuration ==="
            
            # CMake configuration with robust error handling
            echo "Running CMake configuration..."
            if ! cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -G "Visual Studio 17 2022" \
              -A x64 \
              -DBUILD_SHARED_LIBS=OFF \
              -DGGML_STATIC=ON \
              -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded; then
              echo "❌ CMake configuration failed"
              echo "Available generators:"
              cmake --help | grep -A 20 "Generators"
              exit 1
            fi
            
            # Build with error handling
            echo "Running CMake build..."
            if ! cmake --build . --config Release --parallel 2 --verbose; then
              echo "❌ CMake build failed"
              exit 1
            fi
            
          else
            echo "=== Unix Build Configuration ==="
            
            # CMake configuration
            if ! cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DGGML_STATIC=ON; then
              echo "❌ CMake configuration failed"
              exit 1
            fi
            
            # Build
            if ! cmake --build . --config Release --parallel 2; then
              echo "❌ CMake build failed"
              exit 1
            fi
          fi
          
          echo "✅ whisper.cpp build completed successfully"
        shell: bash

      - name: Verify whisper.cpp build artifacts
        run: |
          echo "=== Verifying whisper.cpp Build Artifacts ==="
          cd "src-tauri/lib/whisper.cpp/build"
          
          # Platform-specific verification
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            EXPECTED_LIBS=("whisper.lib" "ggml.lib")
            echo "Looking for Windows libraries..."
            
            for lib in "${EXPECTED_LIBS[@]}"; do
              if find . -name "$lib" -type f | grep -q .; then
                LIB_PATH=$(find . -name "$lib" -type f | head -1)
                echo "✅ Found: $lib at $LIB_PATH"
              else
                echo "❌ Missing: $lib"
                echo "Available .lib files:"
                find . -name "*.lib" -type f || echo "No .lib files found"
                exit 1
              fi
            done
          else
            EXPECTED_LIBS=("libwhisper.a" "libggml.a")
            echo "Looking for Unix libraries..."
            
            for lib in "${EXPECTED_LIBS[@]}"; do
              if find . -name "$lib" -type f | grep -q .; then
                LIB_PATH=$(find . -name "$lib" -type f | head -1)
                echo "✅ Found: $lib at $LIB_PATH"
              else
                echo "❌ Missing: $lib"
                echo "Available .a files:"
                find . -name "*.a" -type f || echo "No .a files found"
                exit 1
              fi
            done
          fi
          
          echo "✅ All required build artifacts verified"
        shell: bash

      # === STEP 7: Install Frontend Dependencies (Including DevDependencies) ===
      - name: Install frontend dependencies
        timeout-minutes: 15
        run: |
          echo "Installing npm dependencies including devDependencies..."
          echo "Note: NODE_ENV is set to production, but we need devDependencies for build tools"
          
          # Strategy 1: npm ci with explicit devDependencies inclusion
          echo "Strategy 1: npm ci with --include=dev..."
          if npm ci --no-audit --no-fund --include=dev; then
            echo "✅ Strategy 1 successful: npm ci with devDependencies"
          else
            echo "❌ Strategy 1 failed, trying alternative..."
            
            # Strategy 2: npm install with explicit devDependencies
            echo "Strategy 2: npm install with --include=dev..."
            rm -rf node_modules 2>/dev/null || true
            if npm install --no-audit --no-fund --include=dev --legacy-peer-deps; then
              echo "✅ Strategy 2 successful: npm install with devDependencies"
            else
              echo "❌ Strategy 2 failed, trying with NODE_ENV override..."
              
              # Strategy 3: Temporarily override NODE_ENV
              echo "Strategy 3: Override NODE_ENV for installation..."
              rm -rf node_modules 2>/dev/null || true
              if NODE_ENV=development npm install --no-audit --no-fund --legacy-peer-deps; then
                echo "✅ Strategy 3 successful: NODE_ENV override"
              else
                echo "❌ All strategies failed"
                exit 1
              fi
            fi
          fi
          
          # Verify critical build tools are installed
          echo "=== Verifying Build Tools Installation ==="
          MISSING_TOOLS=()
          
          for tool in "vite" "@tauri-apps/cli" "typescript"; do
            if [ -d "node_modules/$tool" ]; then
              VERSION=$(node -e "try { console.log(require('./node_modules/$tool/package.json').version); } catch(e) { console.log('unknown'); }")
              echo "✅ $tool: $VERSION"
            else
              echo "❌ $tool: NOT INSTALLED"
              MISSING_TOOLS+=("$tool")
            fi
          done
          
          if [ ${#MISSING_TOOLS[@]} -gt 0 ]; then
            echo "❌ Missing critical build tools: ${MISSING_TOOLS[*]}"
            echo "This indicates devDependencies were not properly installed"
            exit 1
          fi
          
          echo "✅ All build tools verified successfully"
          echo "Total packages: $(find node_modules -name 'package.json' -mindepth 2 -maxdepth 2 | wc -l 2>/dev/null || echo 'unknown')"
        shell: bash

      - name: Build frontend
        timeout-minutes: 15
        run: |
          echo "=== Building Frontend ==="
          
          # Now that devDependencies are properly installed, use npm script
          echo "Building with npm run build..."
          npm run build
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          
          echo "✅ Frontend build completed successfully"
          echo "Build output files: $(find dist -type f 2>/dev/null | wc -l || echo '0')"
        shell: bash

      # === STEP 8: Tauri Build (Simplified) ===
      - name: Build Tauri application
        timeout-minutes: 60
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_BACKTRACE: 1
        with:
          args: ${{ matrix.args }}

      # === STEP 9: Build Output Verification (Robust) ===
      - name: Verify build outputs
        run: |
          echo "=== Build Output Verification ==="
          
          TARGET_DIR="src-tauri/target/${{ matrix.target }}/release/bundle"
          
          if [ ! -d "$TARGET_DIR" ]; then
            echo "❌ Bundle directory not found: $TARGET_DIR"
            echo "Available directories in target:"
            find src-tauri/target -type d -name "bundle" 2>/dev/null || echo "No bundle directories found"
            exit 1
          fi
          
          # Platform-specific verification
          FOUND_INSTALLER=false
          
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            # Check for MSI
            if [ -d "$TARGET_DIR/msi" ] && [ -n "$(ls -A "$TARGET_DIR/msi" 2>/dev/null)" ]; then
              echo "✅ Windows MSI installer found:"
              ls -la "$TARGET_DIR/msi/"
              FOUND_INSTALLER=true
            fi
            
            # Check for NSIS
            if [ -d "$TARGET_DIR/nsis" ] && [ -n "$(ls -A "$TARGET_DIR/nsis" 2>/dev/null)" ]; then
              echo "✅ Windows NSIS installer found:"
              ls -la "$TARGET_DIR/nsis/"
              FOUND_INSTALLER=true
            fi
            
          else
            # Check for DMG
            if [ -d "$TARGET_DIR/dmg" ] && [ -n "$(ls -A "$TARGET_DIR/dmg" 2>/dev/null)" ]; then
              echo "✅ macOS DMG found:"
              ls -la "$TARGET_DIR/dmg/"
              FOUND_INSTALLER=true
            fi
          fi
          
          if [ "$FOUND_INSTALLER" = false ]; then
            echo "❌ No installer packages found"
            echo "Bundle directory contents:"
            ls -la "$TARGET_DIR/" || echo "Bundle directory is empty"
            exit 1
          fi
          
          echo "✅ Build output verification successful"
        shell: bash

      # === STEP 10: Upload Artifacts ===
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: steno-${{ matrix.arch }}-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 30
          if-no-files-found: ignore

      # === STEP 11: Enhanced Debug Information (On Failure) ===
      - name: Debug build failure
        if: failure()
        run: |
          echo "=============================================="
          echo "         BUILD FAILURE DEBUG REPORT"
          echo "=============================================="
          
          echo -e "\n=== Environment ==="
          echo "Platform: ${{ matrix.platform }}"
          echo "Target: ${{ matrix.target }}"
          echo "PWD: $(pwd)"
          echo "Date: $(date)"
          
          echo -e "\n=== System Information ==="
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            systeminfo | head -10 || echo "systeminfo not available"
          else
            uname -a
            [ -f /etc/os-release ] && cat /etc/os-release || echo "OS release info not available"
          fi
          
          echo -e "\n=== Directory Structure ==="
          ls -la
          
          echo -e "\n=== src-tauri Structure ==="
          if [ -d "src-tauri" ]; then
            find src-tauri -type f -name "Cargo.toml" -o -name "*.rs" | head -10
            if [ -d "src-tauri/target" ]; then
              echo "Target directory size: $(du -sh src-tauri/target 2>/dev/null || echo 'unknown')"
              find src-tauri/target -type d -name "bundle" 2>/dev/null || echo "No bundle directories"
            fi
          fi
          
          echo -e "\n=== whisper.cpp Status ==="
          if [ -d "src-tauri/lib/whisper.cpp" ]; then
            ls -la src-tauri/lib/whisper.cpp/
            if [ -d "src-tauri/lib/whisper.cpp/build" ]; then
              echo "Build directory contents:"
              ls -la src-tauri/lib/whisper.cpp/build/
            fi
          fi
          
          echo -e "\n=== Frontend Status ==="
          if [ -d "dist" ]; then
            echo "Dist directory: $(find dist -type f | wc -l) files"
            ls -la dist/ | head -5
          else
            echo "Dist directory not found"
          fi
          
          echo -e "\n=== Node/NPM Status ==="
          if [ -d "node_modules" ]; then
            echo "node_modules exists"
            ls -la node_modules/.bin/ | head -5 || echo "No .bin directory"
          else
            echo "node_modules not found"
          fi
          
          echo -e "\n=== Cargo/Rust Status ==="
          cargo --version 2>/dev/null || echo "Cargo not found"
          rustc --version 2>/dev/null || echo "Rustc not found"
          
          echo -e "\n=== Recent Logs ==="
          if [ -f "$HOME/.npm/_logs"/*.log ]; then
            echo "Recent NPM logs:"
            tail -20 "$HOME/.npm/_logs"/*.log 2>/dev/null || echo "No NPM logs"
          fi
          
          echo "=============================================="
        shell: bash

  # === RELEASE JOB (Unchanged) ===
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== Downloaded Artifacts ==="
          find artifacts -type f -name "*.dmg" -o -name "*.msi" -o -name "*.exe" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}