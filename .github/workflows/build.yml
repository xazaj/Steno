name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CI: true
  NODE_ENV: production
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository (without submodules)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Configure Git for better network handling (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          git config --global http.postBuffer 524288000
          git config --global http.maxRequestBuffer 100M
          git config --global core.compression 0
          git config --global http.lowSpeedLimit 0
          git config --global http.lowSpeedTime 999999
        shell: bash
          
      - name: Initialize and update submodules with retry (Windows)
        if: matrix.platform == 'windows-latest'
        timeout-minutes: 20
        run: |
          echo "Initializing submodules with enhanced retry logic..."
          
          # Initialize submodule configuration
          git submodule init
          
          # Configure submodule URLs to use HTTPS with authentication
          git config submodule."src-tauri/lib/whisper.cpp".url "https://github.com/ggerganov/whisper.cpp.git"
          
          for attempt in 1 2 3; do
            echo "=== Attempt $attempt of 3 ==="
            
            # Sync submodule configuration
            echo "Syncing submodule configuration..."
            git submodule sync --recursive
            
            # Try to update submodules
            echo "Attempting submodule update..."
            
            if git submodule update --init --recursive --force --checkout --progress; then
              echo "✅ Submodules updated successfully!"
              break
            fi
            
            echo "❌ Attempt $attempt failed"
            
            if [ $attempt -lt 3 ]; then
              echo "Cleaning up and retrying in 60 seconds..."
              
              # Clean up any partial clones
              if [ -d "src-tauri/lib/whisper.cpp" ]; then
                rm -rf "src-tauri/lib/whisper.cpp"
              fi
              
              # Reset submodule state
              git submodule deinit --force --all || true
              git submodule init
              git config submodule."src-tauri/lib/whisper.cpp".url "https://github.com/ggerganov/whisper.cpp.git"
              
              sleep 60
            else
              echo "❌ All attempts failed"
              exit 1
            fi
          done
          
          # Verify the submodule is properly initialized
          echo "=== Verifying submodule status ==="
          git submodule status --recursive
          
          if [ -f "src-tauri/lib/whisper.cpp/CMakeLists.txt" ]; then
            echo "✅ whisper.cpp submodule verified successfully"
          else
            echo "❌ whisper.cpp submodule verification failed"
            exit 1
          fi
        shell: bash
        
      - name: Initialize submodules (macOS/Linux)
        if: matrix.platform != 'windows-latest'
        run: |
          git submodule update --init --recursive
        shell: bash


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Cache whisper.cpp build
        uses: actions/cache@v4
        with:
          path: src-tauri/lib/whisper.cpp/build
          key: ${{ runner.os }}-${{ matrix.arch }}-whisper-${{ hashFiles('src-tauri/lib/whisper.cpp/**/*.cpp', 'src-tauri/lib/whisper.cpp/**/*.h', 'src-tauri/lib/whisper.cpp/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-whisper-

      - name: Setup MSVC (Windows)
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Verify build tools (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          cmake --version
          xcode-select -p

      - name: Build whisper.cpp library (Windows)
        if: matrix.platform == 'windows-latest'
        timeout-minutes: 20
        run: |
          cd src-tauri/lib/whisper.cpp
          if not exist build mkdir build
          cd build
          echo "Configuring CMake..."
          cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
          if %ERRORLEVEL% neq 0 (
            echo "CMake configuration failed"
            exit /b 1
          )
          echo "Building whisper.cpp..."
          cmake --build . --config Release --parallel
          if %ERRORLEVEL% neq 0 (
            echo "whisper.cpp build failed"
            exit /b 1
          )
          echo "whisper.cpp build completed successfully"
        shell: cmd

      - name: Verify whisper.cpp build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        continue-on-error: true
        run: |
          cd src-tauri/lib/whisper.cpp/build
          echo "=== Checking library locations ==="
          dir /s *.lib
        shell: cmd

      - name: Build whisper.cpp library (Unix)
        if: matrix.platform != 'windows-latest'
        timeout-minutes: 20
        run: |
          cd src-tauri/lib/whisper.cpp
          mkdir -p build
          cd build
          echo "Configuring CMake..."
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DGGML_STATIC=ON
          if [ $? -ne 0 ]; then
            echo "CMake configuration failed"
            exit 1
          fi
          echo "Building whisper.cpp..."
          cmake --build . --config Release --parallel
          if [ $? -ne 0 ]; then
            echo "whisper.cpp build failed"
            exit 1
          fi
          echo "whisper.cpp build completed successfully"
        shell: bash

      - name: Verify whisper.cpp build artifacts (Unix)
        if: matrix.platform != 'windows-latest'
        continue-on-error: true
        run: |
          cd src-tauri/lib/whisper.cpp/build
          echo "=== Checking library locations ==="
          find . -name "*.a" -type f
          echo "=== Expected locations ==="
          ls -la src/ || echo "src/ directory not found"
          ls -la ggml/src/ || echo "ggml/src/ directory not found"
        shell: bash

      - name: Install frontend dependencies
        timeout-minutes: 10
        run: |
          echo "Installing npm dependencies..."
          npm ci --no-audit --no-fund
          echo "Dependencies installed successfully"

      - name: Build frontend
        timeout-minutes: 15
        run: |
          echo "Building frontend..."
          npm run build
          echo "Frontend build completed successfully"

      - name: Verify Tauri CLI (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Checking Tauri CLI installation..."
          npx tauri --version
          echo "Tauri CLI verified"
        shell: bash

      - name: Build Tauri application
        timeout-minutes: 45
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_BACKTRACE: 1
        with:
          args: ${{ matrix.args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: steno-${{ matrix.arch }}-${{ matrix.platform }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}